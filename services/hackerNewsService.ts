import { ApiResponse } from 'apisauce';
import api from './api'

// Generated by https://quicktype.io

export interface HackerNewsStory {
  by:          string;
  descendants: number;
  id:          number;
  kids:        number[];
  score:       number;
  time:        number;
  title:       string;
  type:        string;
  url:         string;
}

function getRandomized(arr: number[] | undefined, n: number) {
  if (!arr || arr.length === 0) return [] as number[];
  var result = new Array<number>(n),
      len = arr.length,
      taken = new Array(len);
  if (n > len)
      throw new RangeError("getRandom: more elements taken than available");
  while (n--) {
      var x = Math.floor(Math.random() * len);
      result[n] = arr[x in taken ? taken[x] : x];
      taken[x] = --len in taken ? taken[len] : len;
  }
  return result;
}

class HackerNewsService {
  public getTopStories = async () => {
     const response = await api.get<number[]>('/topstories.json')
    if (response.ok) {
      return getRandomized(response.data, 10);
    }
    throw new Error(response.problem);
  }
  public getStoryById = async (id: number) => {
    const response = await api.get<HackerNewsStory>(`/item/${id}.json`);
    if (response.ok) {
      return response.data
    }
    throw new Error(response.problem);
  }
}

export default new HackerNewsService();